Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/10/14 14:26:56
Encryption UI (Encrypt_UI.asm				     Page 1 - 1


				TITLE Encryption UI (Encrypt_UI.asm)
				; Description:
				; Revision Date:

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 = 00003A98			BUFFER = 15000					; Buffer for input file. Large enough to prevent overflow

				COMMENT !
				---------------------------------
				Error messages for openning file
				and reading the file.
				---------------------------------
				!

 00000000 45 72 72 6F 72	inputError	BYTE "Error: File did not open!", 0
	   3A 20 46 69 6C
	   65 20 64 69 64
	   20 6E 6F 74 20
	   6F 70 65 6E 21
	   00
 0000001A 45 72 72 6F 72	readinError BYTE "Error: Cannot read from file!", 0
	   3A 20 43 61 6E
	   6E 6F 74 20 72
	   65 61 64 20 66
	   72 6F 6D 20 66
	   69 6C 65 21 00
 00000038 45 72 72 6F 72	writeError	BYTE "Error: Cannot write to file!", 0
	   3A 20 43 61 6E
	   6E 6F 74 20 77
	   72 69 74 65 20
	   74 6F 20 66 69
	   6C 65 21 00


				COMMENT &
				---------------------------------
				Prompt for decrypt or encrypt
				Prompt for encryption keys.
				Separate n, e and d values
				---------------------------------
				&
 00000055 45 6E 74 65 72	cPrompt		BYTE "Enter (0) for Encryption or (1) for Decryption: ", 0
	   20 28 30 29 20
	   66 6F 72 20 45
	   6E 63 72 79 70
	   74 69 6F 6E 20
	   6F 72 20 28 31
	   29 20 66 6F 72
	   20 44 65 63 72
	   79 70 74 69 6F
	   6E 3A 20 00
 00000086 45 6E 74 65 72	nPrompt		BYTE "Enter n value of the key: ", 0
	   20 6E 20 76 61
	   6C 75 65 20 6F
	   66 20 74 68 65
	   20 6B 65 79 3A
	   20 00
 000000A1 45 6E 74 65 72	multPrompt	BYTE "Enter value for multiplier/counter: ", 0
	   20 76 61 6C 75
	   65 20 66 6F 72
	   20 6D 75 6C 74
	   69 70 6C 69 65
	   72 2F 63 6F 75
	   6E 74 65 72 3A
	   20 00
 000000C6 45 6E 74 65 72	ePrompt	BYTE "Enter e value of the key: ", 0
	   20 65 20 76 61
	   6C 75 65 20 6F
	   66 20 74 68 65
	   20 6B 65 79 3A
	   20 00
 000000E1 45 6E 74 65 72	dPrompt	BYTE "Enter d value of the key: ", 0				;prompt only when decrypting(could be avoided if we store encrytion key values in a file)
	   20 64 20 76 61
	   6C 75 65 20 6F
	   66 20 74 68 65
	   20 6B 65 79 3A
	   20 00
 000000FC 4D 65 73 73 61	fileLengthMsg BYTE "Message Length: ", 0
	   67 65 20 4C 65
	   6E 67 74 68 3A
	   20 00
 0000010D 4E 65 77 20 4D	newLengthPrompt BYTE "New Message Length: ", 0
	   65 73 73 61 67
	   65 20 4C 65 6E
	   67 74 68 3A 20
	   00


 00000122 00			choice		BYTE ?

				COMMENT %
				---------------------------------
				Store public and private key for
				encryption.
				---------------------------------
				%

 00000123 00000000		nValue		DWORD ?
 00000127 00000000		encryptKey	DWORD ?
 0000012B 00000000		decryptKey	DWORD ?


				COMMENT $
				---------------------------------
				Allocated memory for the input
				file portion of the program
				---------------------------------
				$

 0000012F 45 6E 74 65 72	inFilePrompt	BYTE "Enter the input file name: ", 0
	   20 74 68 65 20
	   69 6E 70 75 74
	   20 66 69 6C 65
	   20 6E 61 6D 65
	   3A 20 00
 0000014B  0000001E [		iBuffer			BYTE 30 DUP(?)
	    00
	   ]
 00000169 00000000		iByteCount		DWORD ?
 0000016D 00000000		inFileName		DWORD ?
 00000171 00000000		fileHandle		DWORD ?

				COMMENT &
				---------------------------------
				Allocated memory for the output
				file portion of the program
				---------------------------------
				&

 00000175 45 6E 74 65 72	outFilePrompt	BYTE "Enter desired output file name: ", 0
	   20 64 65 73 69
	   72 65 64 20 6F
	   75 74 70 75 74
	   20 66 69 6C 65
	   20 6E 61 6D 65
	   3A 20 00
 00000196  0000001E [		oBuffer			BYTE 30 DUP(?)
	    00
	   ]
 000001B4 00000000		outFilename		DWORD ?

				COMMENT !
				--------------------------------
				Allocated memory for input file
				data and data manipulation for
				encryption
				--------------------------------
				!

 000001B8  00003A98 [		fileData	BYTE	BUFFER DUP(?)
	    00
	   ]
				align		DWORD
 00003C50  00003A98 [		manipData	BYTE	BUFFER DUP(?)
	    00
	   ]
				align		DWORD


				COMMENT $
				---------------------------------
				Values for Random Generator
				---------------------------------
				$
 000076E8 00000000		T DWORD ?
 000076EC 00000000		K DWORD ?
 000076F0 00000000		R0 DWORD ?

 00000000			.code
 00000000			main PROC

				COMMENT %
				---------------------------------------
				Prompt the user for either encryption
				or decryption.
				---------------------------------------
				%

 00000000			Initial:
 00000000  BA 00000055 R	mov edx, OFFSET cPrompt
 00000005  E8 00000000 E	call WriteString
 0000000A  E8 00000000 E	call ReadInt
 0000000F  83 F8 01		cmp eax, 1


 00000012  0F 84 0000016F	je Decrypt
				COMMENT $
				--------------------------------------
				Prompt the user for n value of the key
				and e value of the key
				--------------------------------------
				$
 00000018  E8 00000000 E	call Clrscr
 0000001D  BA 00000086 R	mov edx, OFFSET nPrompt
 00000022  E8 00000000 E	call WriteString
 00000027  E8 00000000 E	call ReadInt
 0000002C  A3 00000123 R	mov nValue, eax

 00000031  BA 000000C6 R	mov edx, OFFSET ePrompt
 00000036  E8 00000000 E	call WriteString
 0000003B  E8 00000000 E	call ReadInt
 00000040  A3 00000127 R	mov encryptKey, eax

				COMMENT &
				------------------------------------
				Prompt user for the input file name
				and store the file name
				------------------------------------
				&
 00000045  E8 00000000 E	call Clrscr
 0000004A  BA 0000012F R	mov edx, OFFSET inFilePrompt
 0000004F  E8 00000000 E	call WriteString
 00000054  BA 0000014B R	mov edx, OFFSET iBuffer
 00000059  B9 0000001E		mov ecx, SIZEOF iBuffer
 0000005E  E8 00000000 E	call ReadString
 00000063  A3 00000169 R	mov iByteCount, eax
 00000068  89 15 0000016D R	mov inFileName, edx

				COMMENT !
				------------------------------------
				Prompt user for the output file name
				and store the file name
				------------------------------------
				!

 0000006E  BA 00000175 R	mov edx, OFFSET outFilePrompt
 00000073  E8 00000000 E	call WriteString
 00000078  BA 00000196 R	mov edx, OFFSET oBuffer
 0000007D  B9 0000001E		mov ecx, SIZEOF oBuffer
 00000082  E8 00000000 E	call ReadString
 00000087  A3 00000169 R	mov iByteCount, eax
 0000008C  89 15 000001B4 R	mov outFilename, edx

				COMMENT %
				-------------------------------------
				Open user define file input
				-------------------------------------
				%

 00000092  8B 15 0000016D R	mov edx, inFileName
 00000098  E8 00000000 E	call OpenInputFile
 0000009D  83 F8 FF		cmp eax, INVALID_HANDLE_VALUE
 000000A0  0F 84 0000024C	je OpenFileError
 000000A6  A3 00000171 R	mov fileHandle, eax

				COMMENT $
				------------------------------------
				Read from file
				------------------------------------
				$

 000000AB  A1 00000171 R	mov eax, fileHandle
 000000B0  BA 000001B8 R	mov edx, OFFSET fileData
 000000B5  B9 00003A98		mov ecx, BUFFER
 000000BA  E8 00000000 E	call ReadFromFile
 000000BF  0F 82 00000241	jc	file_readError
 000000C5  A3 00000169 R	mov iByteCount, eax

 000000CA  A1 00000171 R	mov eax, fileHandle
 000000CF  E8 00000000 E	call CloseFile


				COMMENT &
				-------------------------------------
				call Encryption PROC here
				-------------------------------------
				&
 000000D4  E8 00000000 E	call Clrscr
					
 000000D9  BA 000000FC R		mov edx, OFFSET fileLengthMsg
 000000DE  E8 00000000 E		call WriteString
 000000E3  A1 00000169 R		mov eax, iByteCount
 000000E8  E8 00000000 E		call WriteInt
 000000ED  E8 00000000 E		call Crlf
 000000F2  BA 0000010D R		mov edx, OFFSET newLengthPrompt
 000000F7  E8 00000000 E		call WriteString
 000000FC  E8 00000000 E		call ReadInt
 00000101  A3 00000169 R		mov iByteCount, eax
 00000106  48				dec eax
 00000107  A3 000076F0 R		mov R0, eax
 0000010C  BA 000000A1 R		mov edx, OFFSET multPrompt
 00000111  E8 00000000 E		call WriteString
 00000116  E8 00000000 E		call ReadInt
 0000011B  A3 000076EC R		mov K, eax
 00000120  A3 000076E8 R		mov T, eax

 00000125  FF 35 000076E8 R		push T						; counter
 0000012B  FF 35 00000169 R		push iByteCount
 00000131  68 000001B8 R		push OFFSET fileData
 00000136  FF 35 000076F0 R		push R0						; seed
 0000013C  68 00003C50 R		push OFFSET manipData
 00000141  FF 35 000076EC R		push K						; multiplier

 00000147  E8 000001E2			call PseudoRandEncrypt

				COMMENT !
				------------------------------------
				Create file and write to file
				------------------------------------
				!

 0000014C  BA 00000196 R	mov edx, OFFSET oBuffer
 00000151  E8 00000000 E	call CreateOutputFile
 00000156  A3 00000171 R	mov fileHandle, eax
 0000015B  BA 00003C50 R	mov edx, OFFSET manipData
 00000160  8B 0D 00000169 R	mov ecx, iByteCount
 00000166  E8 00000000 E	call WriteToFile
 0000016B  0F 82 000001A9	jc writeFalse_Error
 00000171  A3 00000169 R	mov iByteCount, eax

 00000176  A1 00000171 R	mov eax, fileHandle
 0000017B  E8 00000000 E	call CloseFile

				exit
 00000180  6A 00	   *	    push   +000000000h
 00000182  E8 00000000 E   *	    call   ExitProcess




 00000187			Decrypt:
 00000187  E8 00000000 E	call Clrscr
 0000018C  BA 00000086 R	mov edx, OFFSET nPrompt
 00000191  E8 00000000 E	call WriteString
 00000196  E8 00000000 E	call ReadInt
 0000019B  A3 00000123 R	mov nValue, eax

 000001A0  BA 000000E1 R	mov edx, OFFSET dPrompt
 000001A5  E8 00000000 E	call WriteString
 000001AA  E8 00000000 E	call ReadInt
 000001AF  A3 0000012B R	mov decryptKey, eax

				COMMENT &
				------------------------------------
				Prompt user for the input file name
				and store the file name
				------------------------------------
				&
 000001B4  E8 00000000 E	call Clrscr

 000001B9  BA 0000012F R	mov edx, OFFSET inFilePrompt
 000001BE  E8 00000000 E	call WriteString
 000001C3  BA 0000014B R	mov edx, OFFSET iBuffer
 000001C8  B9 0000001E		mov ecx, SIZEOF iBuffer
 000001CD  E8 00000000 E	call ReadString
 000001D2  A3 00000169 R	mov iByteCount, eax
 000001D7  89 15 0000016D R	mov inFileName, edx

				COMMENT !
				------------------------------------
				Prompt user for the output file name
				and store the file name
				------------------------------------
				!

 000001DD  BA 00000175 R	mov edx, OFFSET outFilePrompt
 000001E2  E8 00000000 E	call WriteString
 000001E7  BA 00000196 R	mov edx, OFFSET oBuffer
 000001EC  B9 0000001E		mov ecx, SIZEOF oBuffer
 000001F1  E8 00000000 E	call ReadString
 000001F6  A3 00000169 R	mov iByteCount, eax
 000001FB  89 15 000001B4 R	mov outFilename, edx

				COMMENT %
				-------------------------------------
				Open user define file input
				-------------------------------------
				%

 00000201  8B 15 0000016D R	mov edx, inFileName
 00000207  E8 00000000 E	call OpenInputFile
 0000020C  83 F8 FF		cmp eax, INVALID_HANDLE_VALUE
 0000020F  0F 84 000000DD	je OpenFileError
 00000215  A3 00000171 R	mov fileHandle, eax

				COMMENT $
				------------------------------------
				Read from file
				------------------------------------
				$

 0000021A  A1 00000171 R	mov eax, fileHandle
 0000021F  BA 000001B8 R	mov edx, OFFSET fileData
 00000224  B9 00003A98		mov ecx, BUFFER
 00000229  E8 00000000 E	call ReadFromFile
 0000022E  0F 82 000000D2	jc	file_readError
 00000234  A3 00000169 R	mov iByteCount, eax

 00000239  A1 00000171 R	mov eax, fileHandle
 0000023E  E8 00000000 E	call CloseFile

				COMMENT &
				-------------------------------------
				call Decryption PROC here
				-------------------------------------
				&
 00000243  E8 00000000 E	call Clrscr

 00000248  BA 000000FC R		mov edx, OFFSET fileLengthMsg
 0000024D  E8 00000000 E		call WriteString
 00000252  A1 00000169 R		mov eax, iByteCount
 00000257  E8 00000000 E		call WriteInt
 0000025C  E8 00000000 E		call Crlf
 00000261  BA 0000010D R		mov edx, OFFSET newLengthPrompt
 00000266  E8 00000000 E		call WriteString
 0000026B  E8 00000000 E		call ReadInt
 00000270  A3 00000169 R		mov iByteCount, eax
 00000275  48				dec eax
 00000276  A3 000076F0 R		mov R0, eax
 0000027B  BA 000000A1 R		mov edx, OFFSET multPrompt
 00000280  E8 00000000 E		call WriteString
 00000285  E8 00000000 E		call ReadInt
 0000028A  A3 000076EC R		mov K, eax
 0000028F  A3 000076E8 R		mov T, eax

 00000294  FF 35 000076E8 R		push T						; counter
 0000029A  FF 35 00000169 R		push iByteCount
 000002A0  68 000001B8 R		push OFFSET fileData
 000002A5  FF 35 000076F0 R		push R0						; seed
 000002AB  68 00003C50 R		push OFFSET manipData
 000002B0  FF 35 000076EC R		push K						; multiplier

 000002B6  E8 000000B5			call PseudoRandDecrypt

				COMMENT !
				------------------------------------
				Create file and write to file
				------------------------------------
				!

 000002BB  BA 00000196 R	mov edx, OFFSET oBuffer
 000002C0  E8 00000000 E	call CreateOutputFile
 000002C5  A3 00000171 R	mov fileHandle, eax
 000002CA  BA 00003C50 R	mov edx, OFFSET manipData
 000002CF  8B 0D 00000169 R	mov ecx, iByteCount
 000002D5  E8 00000000 E	call WriteToFile
 000002DA  72 3E		jc writeFalse_Error
 000002DC  A3 00000169 R	mov iByteCount, eax

 000002E1  A1 00000171 R	mov eax, fileHandle
 000002E6  E8 00000000 E	call CloseFile

				exit
 000002EB  6A 00	   *	    push   +000000000h
 000002ED  E8 00000000 E   *	    call   ExitProcess


 000002F2			OpenFileError:
 000002F2  BA 00000000 R		mov edx, OFFSET inputError
 000002F7  E8 00000000 E		call WriteString
 000002FC  E8 00000000 E		call Crlf
 00000301  E9 FFFFFCFA			jmp Initial							; goes to the beginning of the program

 00000306			file_readError:
 00000306  BA 0000001A R		mov edx, OFFSET readinError
 0000030B  E8 00000000 E		call WriteString
 00000310  E8 00000000 E		call Crlf
 00000315  E9 FFFFFCE6			jmp Initial							; goes to the beginning of the program

 0000031A			writeFalse_Error:
 0000031A  BA 00000038 R		mov edx, OFFSET writeError
 0000031F  E8 00000000 E		call WriteString
 00000324  E8 00000000 E		call Crlf
 00000329  E9 FFFFFCD2			jmp Initial

 0000032E			main ENDP

				COMMENT !
				-----------------------------
				Encrytion procedure
				-----------------------------
				!

				;--------------------------------------------------------------------------------
 0000032E			PseudoRandEncrypt PROC USES esi, _K:DWORD, _output:DWORD, _R0:DWORD, _input:DWORD, _MAX:DWORD, _T:DWORD
				;Generates a random integer between 0 and (MAX_NUM_CHAR - 1).
				;Recieves: _K: K constant, _output: OFFSET outputString, _R0: Seed
				;		   _input: OFFSET inputString, _MAX: Max number of characters, _T: T constant
				;Returns:
				;--------------------------------------------------------------------------------
 0000032E  55		   *	    push   ebp
 0000032F  8B EC	   *	    mov    ebp, esp
 00000331  56		   *	    push   esi
 00000332  33 F6			xor esi, esi				;esi = 0

 00000334  8B 45 10			mov eax, _R0
 00000337  8B 5D 14			mov ebx, _input
 0000033A  8B 4D 0C			mov ecx, _output

 0000033D			L1:
 0000033D  8B 55 08			mov edx, _K
 00000340  8B 7D 1C			mov edi, _T

 00000343  F7 E2			mul edx						;edx:eax = R(0) * K
 00000345  03 C7			add eax, edi				;edx:eax = (R(0) * K) + T
 00000347  F7 75 18			div _MAX					;edx = ((R(0) * K) + T) % MAX_NUM_CHAR which is R(n)
 0000034A  8B C2			mov eax, edx				;eax = "...see above..."

 0000034C  8B F9			mov edi, ecx						;edi = OFFSET outputString
 0000034E  03 F8			add edi, eax						;edi = OFFSET outputString + R(n)
 00000350  33 D2			xor edx, edx
 00000352  8A 17			mov dl, BYTE PTR [edi]				;edx = the character at R(n) location in outputString

					;test edx, 110					;test with " " which is 20h which is 00100000b
					;jnz ShouldWeLoop					;lets jump if there is something other than an empty space

 00000354  53				push ebx

 00000355  51				push ecx							;Let's take the next letter from inputString and put it in outputString
 00000356  33 C9			xor ecx, ecx
 00000358  8A 0B			mov cl, BYTE PTR [ebx]
 0000035A  33 DB			xor ebx, ebx
 0000035C  8A D9			mov bl, cl
 0000035E  59				pop ecx

 0000035F  88 1F			mov [edi], bl
 00000361  46				inc esi

 00000362  5B				pop ebx
 00000363  43				inc ebx

 00000364			ShouldWeLoop:							;now check if esi == MAX_NUM_CHAR then {we are done} else {loop again}
 00000364  3B 75 18			cmp esi, _MAX
 00000367  74 02			je No
 00000369  EB D2			jmp L1
 0000036B			No:
					ret
 0000036B  5E		   *	    pop    esi
 0000036C  C9		   *	    leave  
 0000036D  C2 0018	   *	    ret    00018h
 00000370			PseudoRandEncrypt ENDP

 00000370			Encryption PROC

 00000370			Encryption ENDP


				COMMENT %
				-----------------------------
				Decryption procedure
				-----------------------------
				%

				;--------------------------------------------------------------------------------
 00000370			PseudoRandDecrypt PROC USES esi, _K:DWORD, _output:DWORD, _R0:DWORD, _input:DWORD, _MAX:DWORD, _T:DWORD
				;Generates random integers between 0 and (MAX_NUM_CHAR - 1) & decrypts a string.
				;Recieves: _K: K constant, _output: OFFSET outputString, _R0: Seed
				;		   _input: OFFSET inputString, _MAX: Max number of characters, _T: T constant
				;Returns:
				;--------------------------------------------------------------------------------
 00000370  55		   *	    push   ebp
 00000371  8B EC	   *	    mov    ebp, esp
 00000373  56		   *	    push   esi
 00000374  33 F6			xor esi, esi				;esi = 0

 00000376  8B 45 10			mov eax, _R0
 00000379  8B 5D 0C			mov ebx, _output
 0000037C  8B 4D 14			mov ecx, _input

 0000037F			L1:
 0000037F  8B 55 08			mov edx, _K
 00000382  8B 7D 1C			mov edi, _T

 00000385  F7 E2			mul edx						;edx:eax = R(0) * K
 00000387  03 C7			add eax, edi				;edx:eax = (R(0) * K) + T
 00000389  F7 75 18			div _MAX					;edx = ((R(0) * K) + T) % MAX_NUM_CHAR which is R(n)
 0000038C  8B C2			mov eax, edx				;eax = "...see above..."

 0000038E  8B F9			mov edi, ecx						;edi = OFFSET inputString
 00000390  03 F8			add edi, eax						;edi = OFFSET inputString + R(n)

 00000392  51				push ecx							;Let's take the next letter from inputString and put it in outputString
 00000393  33 C9			xor ecx, ecx
 00000395  8A 0F			mov cl, BYTE PTR [edi]

 00000397  88 0B			mov [ebx], cl
 00000399  46				inc esi
 0000039A  43				inc ebx

 0000039B  59				pop ecx

 0000039C			ShouldWeLoop:							;now check if esi == MAX_NUM_CHAR then {we are done} else {loop again}
 0000039C  3B 75 18			cmp esi, _MAX
 0000039F  74 02			je No
 000003A1  EB DC			jmp L1
 000003A3			No:
					ret
 000003A3  5E		   *	    pop    esi
 000003A4  C9		   *	    leave  
 000003A5  C2 0018	   *	    ret    00018h
 000003A8			PseudoRandDecrypt ENDP

 000003A8			Decryption PROC

 000003A8			Decryption ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/10/14 14:26:56
Encryption UI (Encrypt_UI.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000076F4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003A8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Decryption . . . . . . . . . . .	P Near	 000003A8 _TEXT	Length= 00000000 Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Encryption . . . . . . . . . . .	P Near	 00000370 _TEXT	Length= 00000000 Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PseudoRandDecrypt  . . . . . . .	P Near	 00000370 _TEXT	Length= 00000038 Public STDCALL
  _K . . . . . . . . . . . . . .	DWord	 bp + 00000008
  _output  . . . . . . . . . . .	DWord	 bp + 0000000C
  _R0  . . . . . . . . . . . . .	DWord	 bp + 00000010
  _input . . . . . . . . . . . .	DWord	 bp + 00000014
  _MAX . . . . . . . . . . . . .	DWord	 bp + 00000018
  _T . . . . . . . . . . . . . .	DWord	 bp + 0000001C
  L1 . . . . . . . . . . . . . .	L Near	 0000037F _TEXT	
  ShouldWeLoop . . . . . . . . .	L Near	 0000039C _TEXT	
  No . . . . . . . . . . . . . .	L Near	 000003A3 _TEXT	
PseudoRandEncrypt  . . . . . . .	P Near	 0000032E _TEXT	Length= 00000042 Public STDCALL
  _K . . . . . . . . . . . . . .	DWord	 bp + 00000008
  _output  . . . . . . . . . . .	DWord	 bp + 0000000C
  _R0  . . . . . . . . . . . . .	DWord	 bp + 00000010
  _input . . . . . . . . . . . .	DWord	 bp + 00000014
  _MAX . . . . . . . . . . . . .	DWord	 bp + 00000018
  _T . . . . . . . . . . . . . .	DWord	 bp + 0000001C
  L1 . . . . . . . . . . . . . .	L Near	 0000033D _TEXT	
  ShouldWeLoop . . . . . . . . .	L Near	 00000364 _TEXT	
  No . . . . . . . . . . . . . .	L Near	 0000036B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000032E Public STDCALL
  Initial  . . . . . . . . . . .	L Near	 00000000 _TEXT	
  Decrypt  . . . . . . . . . . .	L Near	 00000187 _TEXT	
  OpenFileError  . . . . . . . .	L Near	 000002F2 _TEXT	
  file_readError . . . . . . . .	L Near	 00000306 _TEXT	
  writeFalse_Error . . . . . . .	L Near	 0000031A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER . . . . . . . . . . . . .	Number	 00003A98h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
K  . . . . . . . . . . . . . . .	DWord	 000076EC _DATA	
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
R0 . . . . . . . . . . . . . . .	DWord	 000076F0 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
T  . . . . . . . . . . . . . . .	DWord	 000076E8 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cPrompt  . . . . . . . . . . . .	Byte	 00000055 _DATA	
choice . . . . . . . . . . . . .	Byte	 00000122 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dPrompt  . . . . . . . . . . . .	Byte	 000000E1 _DATA	
decryptKey . . . . . . . . . . .	DWord	 0000012B _DATA	
ePrompt  . . . . . . . . . . . .	Byte	 000000C6 _DATA	
encryptKey . . . . . . . . . . .	DWord	 00000127 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileData . . . . . . . . . . . .	Byte	 000001B8 _DATA	
fileHandle . . . . . . . . . . .	DWord	 00000171 _DATA	
fileLengthMsg  . . . . . . . . .	Byte	 000000FC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
iBuffer  . . . . . . . . . . . .	Byte	 0000014B _DATA	
iByteCount . . . . . . . . . . .	DWord	 00000169 _DATA	
inFileName . . . . . . . . . . .	DWord	 0000016D _DATA	
inFilePrompt . . . . . . . . . .	Byte	 0000012F _DATA	
inputError . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
manipData  . . . . . . . . . . .	Byte	 00003C50 _DATA	
multPrompt . . . . . . . . . . .	Byte	 000000A1 _DATA	
nPrompt  . . . . . . . . . . . .	Byte	 00000086 _DATA	
nValue . . . . . . . . . . . . .	DWord	 00000123 _DATA	
newLengthPrompt  . . . . . . . .	Byte	 0000010D _DATA	
oBuffer  . . . . . . . . . . . .	Byte	 00000196 _DATA	
outFilePrompt  . . . . . . . . .	Byte	 00000175 _DATA	
outFilename  . . . . . . . . . .	DWord	 000001B4 _DATA	
readinError  . . . . . . . . . .	Byte	 0000001A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
writeError . . . . . . . . . . .	Byte	 00000038 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
